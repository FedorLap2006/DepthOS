From 13c40824d9dcd1560625c9c2de7be64fec3a8baa Mon Sep 17 00:00:00 2001
From: Fedor Lapshin <fe.lap.prog@gmail.com>
Date: Tue, 20 Feb 2024 11:46:27 +0300
Subject: [PATCH 1/6] sysdeps: add depthos

---
 abis/depthos/auxv.h                           |  12 +
 abis/depthos/errno.h                          | 115 ++++++
 abis/depthos/stat.h                           |   0
 abis/depthos/vm-flags.h                       |  45 ++
 meson.build                                   |   5 +
 sysdeps/depthos/crt-i686/crt0.S               |  14 +
 sysdeps/depthos/generic/depthos.cpp           | 386 ++++++++++++++++++
 sysdeps/depthos/generic/entry.cpp             |  50 +++
 sysdeps/depthos/include/abi-bits/access.h     |   1 +
 sysdeps/depthos/include/abi-bits/auxv.h       |   1 +
 sysdeps/depthos/include/abi-bits/blkcnt_t.h   |   1 +
 sysdeps/depthos/include/abi-bits/blksize_t.h  |   1 +
 sysdeps/depthos/include/abi-bits/clockid_t.h  |   1 +
 sysdeps/depthos/include/abi-bits/dev_t.h      |   1 +
 sysdeps/depthos/include/abi-bits/epoll.h      |   1 +
 sysdeps/depthos/include/abi-bits/errno.h      |   1 +
 sysdeps/depthos/include/abi-bits/fcntl.h      |   1 +
 sysdeps/depthos/include/abi-bits/fsblkcnt_t.h |   1 +
 sysdeps/depthos/include/abi-bits/fsfilcnt_t.h |   1 +
 sysdeps/depthos/include/abi-bits/gid_t.h      |   1 +
 sysdeps/depthos/include/abi-bits/in.h         |   1 +
 sysdeps/depthos/include/abi-bits/ino_t.h      |   1 +
 sysdeps/depthos/include/abi-bits/inotify.h    |   1 +
 sysdeps/depthos/include/abi-bits/ioctls.h     |   1 +
 sysdeps/depthos/include/abi-bits/limits.h     |   1 +
 sysdeps/depthos/include/abi-bits/mode_t.h     |   1 +
 sysdeps/depthos/include/abi-bits/mqueue.h     |   1 +
 sysdeps/depthos/include/abi-bits/msg.h        |   1 +
 sysdeps/depthos/include/abi-bits/nlink_t.h    |   1 +
 sysdeps/depthos/include/abi-bits/packet.h     |   1 +
 sysdeps/depthos/include/abi-bits/pid_t.h      |   1 +
 sysdeps/depthos/include/abi-bits/poll.h       |   1 +
 sysdeps/depthos/include/abi-bits/ptrace.h     |   1 +
 sysdeps/depthos/include/abi-bits/resource.h   |   1 +
 .../depthos/include/abi-bits/seek-whence.h    |   1 +
 sysdeps/depthos/include/abi-bits/shm.h        |   1 +
 sysdeps/depthos/include/abi-bits/signal.h     |   1 +
 sysdeps/depthos/include/abi-bits/socket.h     |   1 +
 sysdeps/depthos/include/abi-bits/socklen_t.h  |   1 +
 sysdeps/depthos/include/abi-bits/stat.h       |   1 +
 sysdeps/depthos/include/abi-bits/statfs.h     |   1 +
 sysdeps/depthos/include/abi-bits/statvfs.h    |   1 +
 .../depthos/include/abi-bits/suseconds_t.h    |   1 +
 sysdeps/depthos/include/abi-bits/termios.h    |   1 +
 sysdeps/depthos/include/abi-bits/time.h       |   1 +
 sysdeps/depthos/include/abi-bits/uid_t.h      |   1 +
 sysdeps/depthos/include/abi-bits/utsname.h    |   1 +
 sysdeps/depthos/include/abi-bits/vm-flags.h   |   1 +
 sysdeps/depthos/include/abi-bits/wait.h       |   1 +
 sysdeps/depthos/include/abi-bits/xattr.h      |   1 +
 sysdeps/depthos/include/depthos/dirent.h      |  15 +
 sysdeps/depthos/include/depthos/framebuffer.h |  19 +
 sysdeps/depthos/include/depthos/mmap.h        |  16 +
 sysdeps/depthos/include/depthos/syscall.h     |  98 +++++
 sysdeps/depthos/meson.build                   |  69 ++++
 55 files changed, 886 insertions(+)
 create mode 100644 abis/depthos/auxv.h
 create mode 100644 abis/depthos/errno.h
 create mode 100644 abis/depthos/stat.h
 create mode 100644 abis/depthos/vm-flags.h
 create mode 100644 sysdeps/depthos/crt-i686/crt0.S
 create mode 100644 sysdeps/depthos/generic/depthos.cpp
 create mode 100644 sysdeps/depthos/generic/entry.cpp
 create mode 120000 sysdeps/depthos/include/abi-bits/access.h
 create mode 120000 sysdeps/depthos/include/abi-bits/auxv.h
 create mode 120000 sysdeps/depthos/include/abi-bits/blkcnt_t.h
 create mode 120000 sysdeps/depthos/include/abi-bits/blksize_t.h
 create mode 120000 sysdeps/depthos/include/abi-bits/clockid_t.h
 create mode 120000 sysdeps/depthos/include/abi-bits/dev_t.h
 create mode 120000 sysdeps/depthos/include/abi-bits/epoll.h
 create mode 120000 sysdeps/depthos/include/abi-bits/errno.h
 create mode 120000 sysdeps/depthos/include/abi-bits/fcntl.h
 create mode 120000 sysdeps/depthos/include/abi-bits/fsblkcnt_t.h
 create mode 120000 sysdeps/depthos/include/abi-bits/fsfilcnt_t.h
 create mode 120000 sysdeps/depthos/include/abi-bits/gid_t.h
 create mode 120000 sysdeps/depthos/include/abi-bits/in.h
 create mode 120000 sysdeps/depthos/include/abi-bits/ino_t.h
 create mode 120000 sysdeps/depthos/include/abi-bits/inotify.h
 create mode 120000 sysdeps/depthos/include/abi-bits/ioctls.h
 create mode 120000 sysdeps/depthos/include/abi-bits/limits.h
 create mode 120000 sysdeps/depthos/include/abi-bits/mode_t.h
 create mode 120000 sysdeps/depthos/include/abi-bits/mqueue.h
 create mode 120000 sysdeps/depthos/include/abi-bits/msg.h
 create mode 120000 sysdeps/depthos/include/abi-bits/nlink_t.h
 create mode 120000 sysdeps/depthos/include/abi-bits/packet.h
 create mode 120000 sysdeps/depthos/include/abi-bits/pid_t.h
 create mode 120000 sysdeps/depthos/include/abi-bits/poll.h
 create mode 120000 sysdeps/depthos/include/abi-bits/ptrace.h
 create mode 120000 sysdeps/depthos/include/abi-bits/resource.h
 create mode 120000 sysdeps/depthos/include/abi-bits/seek-whence.h
 create mode 120000 sysdeps/depthos/include/abi-bits/shm.h
 create mode 120000 sysdeps/depthos/include/abi-bits/signal.h
 create mode 120000 sysdeps/depthos/include/abi-bits/socket.h
 create mode 120000 sysdeps/depthos/include/abi-bits/socklen_t.h
 create mode 120000 sysdeps/depthos/include/abi-bits/stat.h
 create mode 120000 sysdeps/depthos/include/abi-bits/statfs.h
 create mode 120000 sysdeps/depthos/include/abi-bits/statvfs.h
 create mode 120000 sysdeps/depthos/include/abi-bits/suseconds_t.h
 create mode 120000 sysdeps/depthos/include/abi-bits/termios.h
 create mode 120000 sysdeps/depthos/include/abi-bits/time.h
 create mode 120000 sysdeps/depthos/include/abi-bits/uid_t.h
 create mode 120000 sysdeps/depthos/include/abi-bits/utsname.h
 create mode 120000 sysdeps/depthos/include/abi-bits/vm-flags.h
 create mode 120000 sysdeps/depthos/include/abi-bits/wait.h
 create mode 120000 sysdeps/depthos/include/abi-bits/xattr.h
 create mode 100644 sysdeps/depthos/include/depthos/dirent.h
 create mode 100644 sysdeps/depthos/include/depthos/framebuffer.h
 create mode 100644 sysdeps/depthos/include/depthos/mmap.h
 create mode 100644 sysdeps/depthos/include/depthos/syscall.h
 create mode 100644 sysdeps/depthos/meson.build

diff --git a/abis/depthos/auxv.h b/abis/depthos/auxv.h
new file mode 100644
index 00000000..4a8e09f4
--- /dev/null
+++ b/abis/depthos/auxv.h
@@ -0,0 +1,12 @@
+#ifndef _ABIBITS_AUXV_H
+#define _ABIBITS_AUXV_H
+
+// TODO: implement instead of stubbing
+
+#define AT_HWCAP 16
+#define AT_SECURE 23
+#define AT_RANDOM 25
+#define AT_EXECFN 31
+#define AT_SYSINFO_EHDR 33
+
+#endif
diff --git a/abis/depthos/errno.h b/abis/depthos/errno.h
new file mode 100644
index 00000000..7d4aafb0
--- /dev/null
+++ b/abis/depthos/errno.h
@@ -0,0 +1,115 @@
+#ifndef _ABIBITS_ERRNO_H
+#define _ABIBITS_ERRNO_H
+
+#define E2BIG 1001
+#define EACCES 1002
+#define EADDRINUSE 1003
+#define EADDRNOTAVAIL 1004
+#define EAFNOSUPPORT 1005
+#define EAGAIN 1006
+#define EALREADY 1007
+#define EBADF 1008
+#define EBADMSG 1009
+#define EBUSY 1010
+#define ECANCELED 1011
+#define ECHILD 1012
+#define ECONNABORTED 1013
+#define ECONNREFUSED 1014
+#define ECONNRESET 1015
+#define EDEADLK 1016
+#define EDESTADDRREQ 1017
+#define EDQUOT 1018
+#define EEXIST 1019
+#define EFAULT 1020
+#define EFBIG 1021
+#define EHOSTUNREACH 1022
+#define EIDRM 1023
+#define EINPROGRESS 1024
+#define EINTR 1025
+#define EINVAL 1026
+#define EIO 1027
+#define EISCONN 1028
+#define EISDIR 1029
+#define ELOOP 1030
+#define EMFILE 1031
+#define EMLINK 1032
+#define EMSGSIZE 1034
+#define EMULTIHOP 1035
+#define ENAMETOOLONG 1036
+#define ENETDOWN 1037
+#define ENETRESET 1038
+#define ENETUNREACH 1039
+#define ENFILE 1040
+#define ENOBUFS 1041
+#define ENODEV 1042
+#define ENOENT 1043
+#define ENOEXEC 1044
+#define ENOLCK 1045
+#define ENOLINK 1046
+#define ENOMEM 1047
+#define ENOMSG 1048
+#define ENOPROTOOPT 1049
+#define ENOSPC 1050
+#define ENOSYS 1051
+#define ENOTCONN 1052
+#define ENOTDIR 1053
+#define ENOTEMPTY 1054
+#define ENOTRECOVERABLE 1055
+#define ENOTSOCK 1056
+#define ENOTSUP 1057
+#define ENOIOCTL 1058
+#define ENOTTY ENOIOCTL
+#define ENXIO 1059
+#define EOPNOTSUPP 1060
+#define EOVERFLOW 1061
+#define EOWNERDEAD 1062
+#define EPERM 1063
+#define EPIPE 1064
+#define EPROTO 1065
+#define EPROTONOSUPPORT 1066
+#define EPROTOTYPE 1067
+#define EROFS 1068
+#define ESPIPE 1069
+#define ESRCH 1070
+#define ESTALE 1071
+#define ETIMEDOUT 1072
+#define ETXTBSY 1073
+#define EWOULDBLOCK EAGAIN
+#define EXDEV 1075
+#define ENODATA 1076
+#define ETIME 1077
+#define ENOKEY 1078
+#define ESHUTDOWN 1079
+#define EHOSTDOWN 1080
+#define EBADFD 1081
+#define ENOMEDIUM 1082
+#define ENOTBLK 1083
+#define ENONET 1084
+#define EPFNOSUPPORT 1085
+#define ESOCKTNOSUPPORT 1086
+#define ESTRPIPE 1087
+#define EREMOTEIO 1088
+#define ERFKILL 1089
+#define EBADR 1090
+#define EUNATCH 1091
+#define EMEDIUMTYPE 1092
+#define EREMOTE 1093
+#define EKEYREJECTED 1094
+#define EUCLEAN 1095
+#define EBADSLT 1096
+#define ENOANO 1097
+#define ENOCSI 1098
+#define ENOSTR 1099
+#define ETOOMANYREFS 1100
+#define ENOPKG 1101
+#define EKEYREVOKED 1102
+#define EXFULL 1103
+#define ELNRNG 1104
+#define ENOTUNIQ 1105
+#define ERESTART 1106
+#define EUSERS 1107
+#define ENIMPL 1108
+#define ERANGE 1109
+#define EILSEQ 1110
+#define EDOM 1111
+#endif
diff --git a/abis/depthos/stat.h b/abis/depthos/stat.h
new file mode 100644
index 00000000..e69de29b
diff --git a/abis/depthos/vm-flags.h b/abis/depthos/vm-flags.h
new file mode 100644
index 00000000..32bb8a49
--- /dev/null
+++ b/abis/depthos/vm-flags.h
@@ -0,0 +1,45 @@
+#ifndef _ABIBITS_VM_FLAGS_H
+#define _ABIBITS_VM_FLAGS_H
+
+#define PROT_NONE 0x00
+#define PROT_READ 0x01
+#define PROT_WRITE 0x02
+#define PROT_EXEC 0x04
+
+#define MAP_FAILED ((void *)(-1))
+#define MAP_FILE 0x00
+#define MAP_SHARED 0x01
+#define MAP_PRIVATE 0x02 // TODO: implement
+#define MAP_FIXED 0x04
+#define MAP_ANON 0x08
+#define MAP_ANONYMOUS 0x08
+#define MAP_NORESERVE 0x10       // TODO: implement
+#define MAP_FIXED_NOREPLACE 0x11 // TODO: implement
+
+#define MS_ASYNC 0x01
+#define MS_INVALIDATE 0x02
+#define MS_SYNC 0x04
+
+#define MCL_CURRENT 0x01
+#define MCL_FUTURE 0x02
+
+#define POSIX_MADV_NORMAL 0
+#define POSIX_MADV_RANDOM 1
+#define POSIX_MADV_SEQUENTIAL 2
+#define POSIX_MADV_WILLNEED 3
+#define POSIX_MADV_DONTNEED 4
+
+#define MADV_NORMAL 0
+#define MADV_RANDOM 1
+#define MADV_SEQUENTIAL 2
+#define MADV_WILLNEED 3
+#define MADV_DONTNEED 4
+#define MADV_FREE 8
+
+#define MREMAP_MAYMOVE 1
+#define MREMAP_FIXED 2
+
+#define MFD_CLOEXEC 1U
+#define MFD_ALLOW_SEALING 2U
+
+#endif // _ABIBITS_VM_FLAGS_H
diff --git a/meson.build b/meson.build
index 62c6324c..b15dbc92 100644
--- a/meson.build
+++ b/meson.build
@@ -248,6 +248,11 @@ elif host_machine.system() == 'dripos'
 	rtld_include_dirs += include_directories('sysdeps/dripos/include')
 	libc_include_dirs += include_directories('sysdeps/dripos/include')
 	subdir('sysdeps/dripos')
+elif host_machine.system() == 'depthos'
+	disable_linux_option = true
+	rtdl_include_dirs += include_directories('sysdeps/depthos/include')
+	libc_include_dirs += include_directories('sysdeps/depthos/include')
+	subdir('sysdeps/depthos')
 else
 	error('No sysdeps defined for OS: ' + host_machine.system())
 endif
diff --git a/sysdeps/depthos/crt-i686/crt0.S b/sysdeps/depthos/crt-i686/crt0.S
new file mode 100644
index 00000000..e2b01450
--- /dev/null
+++ b/sysdeps/depthos/crt-i686/crt0.S
@@ -0,0 +1,14 @@
+.section .text
+
+.global _start
+_start:
+    # mov $main, %edi
+    xor %ebp, %ebp
+    mov %esp, %edx
+		push $main
+		push %edx
+    call __mlibc_entry
+
+.size _start, . - _start
+
+.section .note.GNU-stack,"",%progbits
diff --git a/sysdeps/depthos/generic/depthos.cpp b/sysdeps/depthos/generic/depthos.cpp
new file mode 100644
index 00000000..dab80626
--- /dev/null
+++ b/sysdeps/depthos/generic/depthos.cpp
@@ -0,0 +1,386 @@
+#include <mlibc/fsfd_target.hpp>
+#include <time.h>
+#include <frg/formatting.hpp>
+#include <frg/utility.hpp>
+#include <mlibc/arch-defs.hpp>
+#include <depthos/dirent.h>
+#include <depthos/mmap.h>
+#include <depthos/syscall.h>
+#include <dirent.h>
+#include <errno.h>
+#include <mlibc/all-sysdeps.hpp>
+#include <mlibc/debug.hpp>
+#include <mlibc/posix-sysdeps.hpp>
+#include <stddef.h>
+#include <stdlib.h>
+#include <unistd.h>
+
+#define PRINT_STUB                                                                   \
+  mlibc::infoLogger() << __func__ << "() "                                     \
+                      << "is a stub"                                           \
+                      << "\n"                                                  \
+                      << frg::endlog;                                          \
+
+#define STUB                                                                   \
+  {                                                                            \
+    PRINT_STUB                                                                 \
+    return 0;                                                                  \
+  } 
+
+
+#define UNIMPLEMENTED                                                          \
+  __ensure(!"UNIMPLEMENTED function was called");                              \
+  __builtin_unreachable();
+
+namespace mlibc {
+void sys_exit(int status) { 
+  // mlibc::infoLogger() << "exit" << frg::endlog;
+  syscall(SYS_EXIT, status); }
+
+int sys_write(int fd, const void *buf, size_t count, ssize_t *bytes_written) {
+  // mlibc::infoLogger() << "w " << fd << frg::endlog;
+  auto ret = syscall(SYS_WRITE, fd, buf, count);
+  if (ret < 0)
+    return -ret;
+
+  *bytes_written = ret;
+  return 0;
+}
+
+int sys_read(int fd, void *buf, size_t count, ssize_t *bytes_read) {
+  // mlibc::infoLogger() << "read: " << frg::fmt("fd={} buf={:x} count={}", fd, buf, count) << "\n" << frg::endlog;
+  auto ret = syscall(SYS_READ, fd, buf, count);
+  if (ret < 0)
+    return -ret;
+  *bytes_read = ret;
+
+  return 0;
+}
+int sys_pread(int fd, void *buf, size_t n, off_t off, ssize_t *bytes_read) {
+  UNIMPLEMENTED;
+  return 0;
+}
+
+
+int sys_open(const char *pathname, int flags, mode_t mode, int *fd) {
+  auto ret = syscall(SYS_OPEN, pathname);
+  if (ret < 0)
+    return -ret;
+
+  *fd = ret;
+  return 0;
+}
+int sys_openat(int dirfd, const char *path, int flags, mode_t mode, int *fd) {
+  STUB
+}
+
+int sys_waitpid(pid_t pid, int *status, int flags, struct rusage *ru,
+                pid_t *ret_pid) {
+  return 0; // TODO: implement
+}
+
+int sys_setrlimit(int resource, const struct rlimit *limit) {
+  STUB
+}
+
+int sys_close(int fd) {
+  // mlibc::infoLogger() << "close" << frg::endlog;
+  return syscall(SYS_CLOSE, fd); }
+
+int sys_seek(int fd, off_t offset, int whence, off_t *new_offset) { // TODO: off_t != off64_t 
+  // mlibc::infoLogger() << "seek: " << fd << " " << offset << " " << whence << frg::endlog;
+  auto ret = syscall(SYS_SEEK, fd, (long)offset, whence);
+  if (ret < 0)
+    return -ret;
+  // mlibc::infoLogger() << "seek: returned with " << ret << frg::endlog;
+  *new_offset = (off_t)ret;
+  return 0;
+}
+
+int sys_tcb_set(void *pointer) {
+  syscall(SYS_PRCTL, 1, pointer);
+  // mlibc::infoLogger() << "and here" << frg::endlog;
+  return 0;
+}
+
+int sys_futex_wait(int *pointer, int expected, const struct timespec *time) {
+  STUB
+}
+
+int sys_futex_wake(int *pointer) { 
+STUB
+}
+void sys_libc_log(const char *msg) { syscall(SYS_WRITE, 1, msg, strlen(msg)); }
+
+void sys_libc_panic() {
+  sys_libc_log("\nlibc panic!\n");
+  sys_exit(1);
+}
+
+int sys_vm_map(void *addr, size_t length, int prot, int flags, int fd,
+               off_t offset, void **result) {
+  struct sc_mmap_params params = (struct sc_mmap_params){.addr = addr,
+                                                         .length = length,
+                                                         .prot = prot,
+                                                         .flags = flags,
+                                                         .fd = fd,
+                                                         .offset = offset};
+  // mlibc::infoLogger() << "\n" << params.addr << " " << params.length << "\n"
+  // << frg::endlog;
+  long ret = syscall(SYS_VM_MAP, reinterpret_cast<void *>(&params));
+  if (ret < 0) {
+    // mlibc::infoLogger() << "\nfail: " << reinterpret_cast<void*>(ret) <<
+    // frg::endlog;
+    return -ret;
+  }
+  // mlibc::infoLogger() << frg::endlog;
+  // mlibc::infoLogger() << "\n" << reinterpret_cast<void*>(ret) << frg::endlog;
+  *result = reinterpret_cast<void *>(ret);
+  return 0;
+}
+
+int sys_anon_allocate(size_t size, void **pointer) {
+  return sys_vm_map(nullptr, size, PROT_READ | PROT_WRITE,
+                    MAP_PRIVATE | MAP_ANONYMOUS, -1, 0, pointer);
+}
+
+int sys_vm_unmap(void *pointer, size_t size) { STUB }
+
+int sys_anon_free(void *pointer, size_t size) { STUB }
+int sys_clock_get(int clock, time_t *secs, int64_t *nanos) {
+  *secs = 0;
+  *nanos = 0;
+  STUB;
+  return 0;
+}
+int sys_isatty(int fd) {
+  auto res = syscall(SYS_ISATTY, fd);
+  if (res < 0) {
+    mlibc::infoLogger() << "isatty: " << fd << ": not a tty: " << -res << "\n" << frg::endlog;
+    return -res;
+  }
+  mlibc::infoLogger() << "isatty: " << fd << ": a tty\n" << frg::endlog;
+  return 0;
+}
+int sys_sleep(time_t *sec, long *nanosec) {
+  auto res = syscall(SYS_SLEEP, *sec, *nanosec);
+  if (res < 0) {
+    return res;
+  }
+  return 0;
+}
+int sys_dup2(int fd, int flags, int newfd) {
+  auto res = syscall(SYS_DUP3, fd, newfd, flags);
+  if (res < 0) {
+    return res;
+  }
+  return 0;
+}
+
+int sys_fork(pid_t *child) {
+  auto ret = syscall(SYS_FORK);
+  if (ret < 0) {
+    return -ret;
+  }
+  *child = static_cast<pid_t>(ret);
+  return 0;
+}
+pid_t sys_getpid() { return syscall(SYS_GETPID); }
+pid_t sys_getppid() { return syscall(SYS_GETPPID); }
+
+int sys_execve(const char *path, char *const argv[], char *const envp[]) {
+  auto ret = syscall(SYS_EXECVE, path, argv, envp);
+  if (ret < 0)
+    return -ret;
+  return 0;
+}
+uid_t sys_getuid() { return 0; }
+gid_t sys_getgid() { return 0; }
+gid_t sys_getegid() { return 0; }
+uid_t sys_geteuid() { return 0; }
+pid_t sys_gettid() { UNIMPLEMENTED }
+
+int sys_sigprocmask(int how, const sigset_t *__restrict set,
+                    sigset_t *__restrict retrieve) {
+  return 0;
+}
+int sys_sigaction(int, const struct sigaction *__restrict,
+                  struct sigaction *__restrict) {
+  return 0;
+}
+int sys_gethostname(char *buffer, size_t bufsize) {
+  strncpy(buffer, "depthos", bufsize); // TODO: syscall
+  return 0;
+}
+
+int sys_getcwd(char *buf, size_t size) {
+  strncpy(buf, "/", size); // TODO: syscall
+  return 0;
+}
+
+// TODO: stubs
+
+pid_t sys_getpgid(pid_t pid, pid_t *pgid) {
+  *pgid = 0;
+  return 0;
+}
+int sys_setpgid(pid_t pid, pid_t pgid) {
+  STUB;
+  return 0;
+}
+int sys_fcntl(int fd, int request, va_list args, int *result) {
+  STUB;
+  return 0;
+}
+int sys_ioctl(int fd, unsigned long request, void *arg, int *result) {
+  int ret = syscall(SYS_IOCTL, fd, request, arg);
+  if (ret < 0) {
+    return -ret;
+  }
+  *result = ret;
+
+  return 0;
+}
+int sys_tcgetattr(int fd, struct termios *attr) {
+  STUB;
+  return 0;
+}
+int sys_pselect(int num_fds, fd_set *read_set, fd_set *write_set,
+                fd_set *except_set, const struct timespec *timeout,
+                const sigset_t *sigmask, int *num_events) {
+  // STUB;
+  return 0;
+}
+int sys_getrlimit(int resource, struct rlimit *limit) {
+  switch (resource) {
+  case RLIMIT_NOFILE:
+    limit->rlim_cur = 256;
+    limit->rlim_max = 256;
+    break;
+    // TODO: rlim current
+  default:
+    return -EINVAL;
+  }
+  return 0;
+}
+int sys_tcsetattr(int, int, const struct termios *attr) {
+  STUB;
+  return 0;
+}
+int sys_dup(int fd, int flags, int *newfd) {
+  auto res = syscall(SYS_DUP3, fd, -1, flags);
+  if (res < 0) {
+    return res;
+  }
+  return res;
+}
+int sys_stat(fsfd_target fsfdt, int fd, const char *path, int flags,
+             struct stat *statbuf) {
+  auto res = 0;
+  switch (fsfdt) {
+  case mlibc::fsfd_target::fd:
+    res = syscall(SYS_STATFD, fd, statbuf);
+    break;
+  case mlibc::fsfd_target::path:
+    res = syscall(SYS_STAT, path, statbuf);
+    break;
+  default:
+    return ENOSYS;
+  }
+
+  if (res < 0) {
+    return -res;
+  }
+
+  return 0;
+}
+
+int sys_open_dir(const char *pathname, int *fd) {
+  auto ret = syscall(SYS_OPEN, pathname); // TODO: EISDIR
+  if (ret < 0)
+    return -ret;
+
+  *fd = ret;
+  return 0;
+}
+
+struct depthos_dentry {
+  uint8_t type;
+  uint32_t inode;
+  uint32_t offset;
+  char name[];
+} __attribute__((packed));
+
+int sys_read_entries(int fd, void *buffer, size_t max_size,
+                     size_t *bytes_read) {
+  size_t max_name_len = max_size - sizeof(struct dirent);
+  struct depthos_dentry *re = reinterpret_cast<struct depthos_dentry *>(
+      malloc(max_name_len + sizeof(struct depthos_dentry)));
+  auto ret =
+      syscall(SYS_READENTRY, fd, re,
+              max_name_len + sizeof(struct depthos_dentry)); // TODO: ENOTDIR
+  if (ret < 0) {
+    // mlibc::infoLogger() << "return " << ret << frg::endlog;
+    return -ret;
+  }
+
+  if (ret == 0) {
+    *bytes_read = 0;
+    return 0;
+  }
+
+  struct dirent *e = reinterpret_cast<struct dirent *>(buffer);
+  *e = (struct dirent){
+      .d_ino = static_cast<ino_t>(re->inode),
+      .d_off = static_cast<off_t>(re->offset),
+      .d_reclen = static_cast<unsigned short>(
+          sizeof(struct dirent) +
+          frg::min<size_t>(max_name_len, strlen(re->name) + 1)),
+      .d_type = mlibc::convert_native_dirent_type(re->type),
+  };
+  // mlibc::infoLogger() << "name: " << re->name << "\n" << frg::endlog;
+  strcpy(e->d_name, re->name);
+  // mlibc::infoLogger() << "re: " << e->d_ino << " " << e->d_name  << "\n" <<
+  // frg::endlog;
+  free(re);
+  *bytes_read = e->d_reclen;
+
+  return 0;
+}
+int sys_peername(int fd, struct sockaddr *addr_ptr, socklen_t max_addr_length, socklen_t *actual_length) { STUB }
+
+int sys_sysconf(int num, long *ret) {
+  // TODO: syscall
+	switch(num) {
+		case _SC_PAGE_SIZE:
+			*ret = mlibc::page_size;
+      break;
+		case _SC_OPEN_MAX:
+			*ret = 256; 
+      break;
+		case _SC_PHYS_PAGES:
+			*ret = 3906250; // 4 GB (not GiB)
+      break;
+		case _SC_CHILD_MAX:
+      *ret = -1;
+      break;
+		case _SC_JOB_CONTROL:
+      *ret = 0;
+      break;
+		case _SC_CLK_TCK:
+      *ret = 1000;
+      break;
+  }
+  return 0;
+}
+
+
+int sys_times(struct tms *tms, clock_t *out) {
+  auto res = syscall(SYS_TIMES, tms);
+  if (res < 0)
+    return -res;
+  *out = 0; // TODO: implement using PIT
+  return 0;
+}
+
+} // namespace mlibc
diff --git a/sysdeps/depthos/generic/entry.cpp b/sysdeps/depthos/generic/entry.cpp
new file mode 100644
index 00000000..c58428bb
--- /dev/null
+++ b/sysdeps/depthos/generic/entry.cpp
@@ -0,0 +1,50 @@
+#include <bits/ensure.h>
+#include <mlibc/debug.hpp>
+#include <mlibc/elf/startup.h>
+#include <stdint.h>
+#include <stdlib.h>
+
+// static mlibc::exec_da
+
+void __mlibc_initLocale();
+
+extern "C" uintptr_t *__dlapi_entrystack();
+extern "C" void __dlapi_enter(uintptr_t *);
+
+extern char **environ;
+static mlibc::exec_stack_data __mlibc_stack_data;
+
+struct LibraryGuard {
+	LibraryGuard();
+};
+
+#if !defined(MLIBC_STATIC_BUILD) 
+static LibraryGuard guard;
+#endif
+
+LibraryGuard::LibraryGuard() {
+	__mlibc_initLocale();
+
+	// Parse the exec() stack.
+	mlibc::parse_exec_stack(__dlapi_entrystack(), &__mlibc_stack_data);
+	mlibc::set_startup_data(__mlibc_stack_data.argc, __mlibc_stack_data.argv,
+			__mlibc_stack_data.envp);
+}
+
+extern "C" void __dlapi_enter(uintptr_t *);
+
+size_t __hwcap = 0; // TODO: auxv
+
+extern "C" void __mlibc_entry(uintptr_t *entry_stack,
+                              int (*main)(int argc, char *argv[],
+                                          char *env[])) {
+  // __hwcap = getauxval(AT_HWCAP);
+  __dlapi_enter(entry_stack);
+  mlibc::infoLogger() << "entry stack: " << __dlapi_entrystack() << frg::endlog;
+#if defined (MLIBC_STATIC_BUILD)
+  static volatile LibraryGuard guard;
+  // mlibc::infoLogger() << "test" << frg::endlog;
+#endif
+  exit(main(__mlibc_stack_data.argc, __mlibc_stack_data.argv, __mlibc_stack_data.envp));
+}
+
diff --git a/sysdeps/depthos/include/abi-bits/access.h b/sysdeps/depthos/include/abi-bits/access.h
new file mode 120000
index 00000000..171f75f8
--- /dev/null
+++ b/sysdeps/depthos/include/abi-bits/access.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/access.h
\ No newline at end of file
diff --git a/sysdeps/depthos/include/abi-bits/auxv.h b/sysdeps/depthos/include/abi-bits/auxv.h
new file mode 120000
index 00000000..61a1554b
--- /dev/null
+++ b/sysdeps/depthos/include/abi-bits/auxv.h
@@ -0,0 +1 @@
+../../../../abis/depthos/auxv.h
\ No newline at end of file
diff --git a/sysdeps/depthos/include/abi-bits/blkcnt_t.h b/sysdeps/depthos/include/abi-bits/blkcnt_t.h
new file mode 120000
index 00000000..e9d9f1b4
--- /dev/null
+++ b/sysdeps/depthos/include/abi-bits/blkcnt_t.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/blkcnt_t.h
\ No newline at end of file
diff --git a/sysdeps/depthos/include/abi-bits/blksize_t.h b/sysdeps/depthos/include/abi-bits/blksize_t.h
new file mode 120000
index 00000000..c6dfb6e0
--- /dev/null
+++ b/sysdeps/depthos/include/abi-bits/blksize_t.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/blksize_t.h
\ No newline at end of file
diff --git a/sysdeps/depthos/include/abi-bits/clockid_t.h b/sysdeps/depthos/include/abi-bits/clockid_t.h
new file mode 120000
index 00000000..71f37bb6
--- /dev/null
+++ b/sysdeps/depthos/include/abi-bits/clockid_t.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/clockid_t.h
\ No newline at end of file
diff --git a/sysdeps/depthos/include/abi-bits/dev_t.h b/sysdeps/depthos/include/abi-bits/dev_t.h
new file mode 120000
index 00000000..0c1143b9
--- /dev/null
+++ b/sysdeps/depthos/include/abi-bits/dev_t.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/dev_t.h
\ No newline at end of file
diff --git a/sysdeps/depthos/include/abi-bits/epoll.h b/sysdeps/depthos/include/abi-bits/epoll.h
new file mode 120000
index 00000000..9efc3a05
--- /dev/null
+++ b/sysdeps/depthos/include/abi-bits/epoll.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/epoll.h
\ No newline at end of file
diff --git a/sysdeps/depthos/include/abi-bits/errno.h b/sysdeps/depthos/include/abi-bits/errno.h
new file mode 120000
index 00000000..1728aeb7
--- /dev/null
+++ b/sysdeps/depthos/include/abi-bits/errno.h
@@ -0,0 +1 @@
+../../../../abis/depthos/errno.h
\ No newline at end of file
diff --git a/sysdeps/depthos/include/abi-bits/fcntl.h b/sysdeps/depthos/include/abi-bits/fcntl.h
new file mode 120000
index 00000000..ea5323ad
--- /dev/null
+++ b/sysdeps/depthos/include/abi-bits/fcntl.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/fcntl.h
\ No newline at end of file
diff --git a/sysdeps/depthos/include/abi-bits/fsblkcnt_t.h b/sysdeps/depthos/include/abi-bits/fsblkcnt_t.h
new file mode 120000
index 00000000..898dfb2f
--- /dev/null
+++ b/sysdeps/depthos/include/abi-bits/fsblkcnt_t.h
@@ -0,0 +1 @@
+../../../../abis/linux/fsblkcnt_t.h
\ No newline at end of file
diff --git a/sysdeps/depthos/include/abi-bits/fsfilcnt_t.h b/sysdeps/depthos/include/abi-bits/fsfilcnt_t.h
new file mode 120000
index 00000000..791755c9
--- /dev/null
+++ b/sysdeps/depthos/include/abi-bits/fsfilcnt_t.h
@@ -0,0 +1 @@
+../../../../abis/linux/fsfilcnt_t.h
\ No newline at end of file
diff --git a/sysdeps/depthos/include/abi-bits/gid_t.h b/sysdeps/depthos/include/abi-bits/gid_t.h
new file mode 120000
index 00000000..6a772180
--- /dev/null
+++ b/sysdeps/depthos/include/abi-bits/gid_t.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/gid_t.h
\ No newline at end of file
diff --git a/sysdeps/depthos/include/abi-bits/in.h b/sysdeps/depthos/include/abi-bits/in.h
new file mode 120000
index 00000000..b58c683f
--- /dev/null
+++ b/sysdeps/depthos/include/abi-bits/in.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/in.h
\ No newline at end of file
diff --git a/sysdeps/depthos/include/abi-bits/ino_t.h b/sysdeps/depthos/include/abi-bits/ino_t.h
new file mode 120000
index 00000000..10d644e7
--- /dev/null
+++ b/sysdeps/depthos/include/abi-bits/ino_t.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/ino_t.h
\ No newline at end of file
diff --git a/sysdeps/depthos/include/abi-bits/inotify.h b/sysdeps/depthos/include/abi-bits/inotify.h
new file mode 120000
index 00000000..3f19ef6e
--- /dev/null
+++ b/sysdeps/depthos/include/abi-bits/inotify.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/inotify.h
\ No newline at end of file
diff --git a/sysdeps/depthos/include/abi-bits/ioctls.h b/sysdeps/depthos/include/abi-bits/ioctls.h
new file mode 120000
index 00000000..595106b6
--- /dev/null
+++ b/sysdeps/depthos/include/abi-bits/ioctls.h
@@ -0,0 +1 @@
+../../../../abis/linux/ioctls.h
\ No newline at end of file
diff --git a/sysdeps/depthos/include/abi-bits/limits.h b/sysdeps/depthos/include/abi-bits/limits.h
new file mode 120000
index 00000000..1aa58942
--- /dev/null
+++ b/sysdeps/depthos/include/abi-bits/limits.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/limits.h
\ No newline at end of file
diff --git a/sysdeps/depthos/include/abi-bits/mode_t.h b/sysdeps/depthos/include/abi-bits/mode_t.h
new file mode 120000
index 00000000..29d77331
--- /dev/null
+++ b/sysdeps/depthos/include/abi-bits/mode_t.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/mode_t.h
\ No newline at end of file
diff --git a/sysdeps/depthos/include/abi-bits/mqueue.h b/sysdeps/depthos/include/abi-bits/mqueue.h
new file mode 120000
index 00000000..fa87b078
--- /dev/null
+++ b/sysdeps/depthos/include/abi-bits/mqueue.h
@@ -0,0 +1 @@
+../../../../abis/linux/mqueue.h
\ No newline at end of file
diff --git a/sysdeps/depthos/include/abi-bits/msg.h b/sysdeps/depthos/include/abi-bits/msg.h
new file mode 120000
index 00000000..f402b493
--- /dev/null
+++ b/sysdeps/depthos/include/abi-bits/msg.h
@@ -0,0 +1 @@
+../../../../abis/linux/msg.h
\ No newline at end of file
diff --git a/sysdeps/depthos/include/abi-bits/nlink_t.h b/sysdeps/depthos/include/abi-bits/nlink_t.h
new file mode 120000
index 00000000..7618c27f
--- /dev/null
+++ b/sysdeps/depthos/include/abi-bits/nlink_t.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/nlink_t.h
\ No newline at end of file
diff --git a/sysdeps/depthos/include/abi-bits/packet.h b/sysdeps/depthos/include/abi-bits/packet.h
new file mode 120000
index 00000000..47067e21
--- /dev/null
+++ b/sysdeps/depthos/include/abi-bits/packet.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/packet.h
\ No newline at end of file
diff --git a/sysdeps/depthos/include/abi-bits/pid_t.h b/sysdeps/depthos/include/abi-bits/pid_t.h
new file mode 120000
index 00000000..3fd26a7f
--- /dev/null
+++ b/sysdeps/depthos/include/abi-bits/pid_t.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/pid_t.h
\ No newline at end of file
diff --git a/sysdeps/depthos/include/abi-bits/poll.h b/sysdeps/depthos/include/abi-bits/poll.h
new file mode 120000
index 00000000..ab989c75
--- /dev/null
+++ b/sysdeps/depthos/include/abi-bits/poll.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/poll.h
\ No newline at end of file
diff --git a/sysdeps/depthos/include/abi-bits/ptrace.h b/sysdeps/depthos/include/abi-bits/ptrace.h
new file mode 120000
index 00000000..f391fb72
--- /dev/null
+++ b/sysdeps/depthos/include/abi-bits/ptrace.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/ptrace.h
\ No newline at end of file
diff --git a/sysdeps/depthos/include/abi-bits/resource.h b/sysdeps/depthos/include/abi-bits/resource.h
new file mode 120000
index 00000000..3e59c750
--- /dev/null
+++ b/sysdeps/depthos/include/abi-bits/resource.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/resource.h
\ No newline at end of file
diff --git a/sysdeps/depthos/include/abi-bits/seek-whence.h b/sysdeps/depthos/include/abi-bits/seek-whence.h
new file mode 120000
index 00000000..3bd41efd
--- /dev/null
+++ b/sysdeps/depthos/include/abi-bits/seek-whence.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/seek-whence.h
\ No newline at end of file
diff --git a/sysdeps/depthos/include/abi-bits/shm.h b/sysdeps/depthos/include/abi-bits/shm.h
new file mode 120000
index 00000000..067d8c4f
--- /dev/null
+++ b/sysdeps/depthos/include/abi-bits/shm.h
@@ -0,0 +1 @@
+../../../../abis/linux/shm.h
\ No newline at end of file
diff --git a/sysdeps/depthos/include/abi-bits/signal.h b/sysdeps/depthos/include/abi-bits/signal.h
new file mode 120000
index 00000000..4dcb0b7c
--- /dev/null
+++ b/sysdeps/depthos/include/abi-bits/signal.h
@@ -0,0 +1 @@
+../../../../abis/linux/signal.h
\ No newline at end of file
diff --git a/sysdeps/depthos/include/abi-bits/socket.h b/sysdeps/depthos/include/abi-bits/socket.h
new file mode 120000
index 00000000..0e1d6be9
--- /dev/null
+++ b/sysdeps/depthos/include/abi-bits/socket.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/socket.h
\ No newline at end of file
diff --git a/sysdeps/depthos/include/abi-bits/socklen_t.h b/sysdeps/depthos/include/abi-bits/socklen_t.h
new file mode 120000
index 00000000..41f3b11f
--- /dev/null
+++ b/sysdeps/depthos/include/abi-bits/socklen_t.h
@@ -0,0 +1 @@
+../../../../abis/linux/socklen_t.h
\ No newline at end of file
diff --git a/sysdeps/depthos/include/abi-bits/stat.h b/sysdeps/depthos/include/abi-bits/stat.h
new file mode 120000
index 00000000..82642c3c
--- /dev/null
+++ b/sysdeps/depthos/include/abi-bits/stat.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/stat.h
\ No newline at end of file
diff --git a/sysdeps/depthos/include/abi-bits/statfs.h b/sysdeps/depthos/include/abi-bits/statfs.h
new file mode 120000
index 00000000..e3d202f5
--- /dev/null
+++ b/sysdeps/depthos/include/abi-bits/statfs.h
@@ -0,0 +1 @@
+../../../../abis/linux/statfs.h
\ No newline at end of file
diff --git a/sysdeps/depthos/include/abi-bits/statvfs.h b/sysdeps/depthos/include/abi-bits/statvfs.h
new file mode 120000
index 00000000..1fc80c2a
--- /dev/null
+++ b/sysdeps/depthos/include/abi-bits/statvfs.h
@@ -0,0 +1 @@
+../../../../abis/linux/statvfs.h
\ No newline at end of file
diff --git a/sysdeps/depthos/include/abi-bits/suseconds_t.h b/sysdeps/depthos/include/abi-bits/suseconds_t.h
new file mode 120000
index 00000000..9ed65977
--- /dev/null
+++ b/sysdeps/depthos/include/abi-bits/suseconds_t.h
@@ -0,0 +1 @@
+../../../../abis/linux/suseconds_t.h
\ No newline at end of file
diff --git a/sysdeps/depthos/include/abi-bits/termios.h b/sysdeps/depthos/include/abi-bits/termios.h
new file mode 120000
index 00000000..ee8f0b09
--- /dev/null
+++ b/sysdeps/depthos/include/abi-bits/termios.h
@@ -0,0 +1 @@
+../../../../abis/linux/termios.h
\ No newline at end of file
diff --git a/sysdeps/depthos/include/abi-bits/time.h b/sysdeps/depthos/include/abi-bits/time.h
new file mode 120000
index 00000000..2a026257
--- /dev/null
+++ b/sysdeps/depthos/include/abi-bits/time.h
@@ -0,0 +1 @@
+../../../../abis/linux/time.h
\ No newline at end of file
diff --git a/sysdeps/depthos/include/abi-bits/uid_t.h b/sysdeps/depthos/include/abi-bits/uid_t.h
new file mode 120000
index 00000000..1113eba6
--- /dev/null
+++ b/sysdeps/depthos/include/abi-bits/uid_t.h
@@ -0,0 +1 @@
+../../../../abis/mlibc/uid_t.h
\ No newline at end of file
diff --git a/sysdeps/depthos/include/abi-bits/utsname.h b/sysdeps/depthos/include/abi-bits/utsname.h
new file mode 120000
index 00000000..b2857547
--- /dev/null
+++ b/sysdeps/depthos/include/abi-bits/utsname.h
@@ -0,0 +1 @@
+../../../../abis/linux/utsname.h
\ No newline at end of file
diff --git a/sysdeps/depthos/include/abi-bits/vm-flags.h b/sysdeps/depthos/include/abi-bits/vm-flags.h
new file mode 120000
index 00000000..f72c69c2
--- /dev/null
+++ b/sysdeps/depthos/include/abi-bits/vm-flags.h
@@ -0,0 +1 @@
+../../../../abis/depthos/vm-flags.h
\ No newline at end of file
diff --git a/sysdeps/depthos/include/abi-bits/wait.h b/sysdeps/depthos/include/abi-bits/wait.h
new file mode 120000
index 00000000..feb2840c
--- /dev/null
+++ b/sysdeps/depthos/include/abi-bits/wait.h
@@ -0,0 +1 @@
+../../../../abis/linux/wait.h
\ No newline at end of file
diff --git a/sysdeps/depthos/include/abi-bits/xattr.h b/sysdeps/depthos/include/abi-bits/xattr.h
new file mode 120000
index 00000000..66412d70
--- /dev/null
+++ b/sysdeps/depthos/include/abi-bits/xattr.h
@@ -0,0 +1 @@
+../../../../abis/linux/xattr.h
\ No newline at end of file
diff --git a/sysdeps/depthos/include/depthos/dirent.h b/sysdeps/depthos/include/depthos/dirent.h
new file mode 100644
index 00000000..73d9dab0
--- /dev/null
+++ b/sysdeps/depthos/include/depthos/dirent.h
@@ -0,0 +1,15 @@
+#pragma once
+#include <dirent.h>
+
+#define DEPTHOS_DT_FILE 0x0001
+
+namespace mlibc {
+  static constexpr unsigned char convert_native_dirent_type(unsigned char dt) {
+    switch(dt) {
+    case DEPTHOS_DT_FILE:
+      return DT_REG;
+    }
+
+    return DT_UNKNOWN;
+  }
+}
diff --git a/sysdeps/depthos/include/depthos/framebuffer.h b/sysdeps/depthos/include/depthos/framebuffer.h
new file mode 100644
index 00000000..d79af6c3
--- /dev/null
+++ b/sysdeps/depthos/include/depthos/framebuffer.h
@@ -0,0 +1,19 @@
+#pragma once
+
+#include <stdint.h>
+
+#define FRAMEBUFFER_IOCTL_NVARINFO 1
+#define FRAMEBUFFER_IOCTL_NSTINFO 2
+#define FRAMEBUFFER_IOCTL_NSETVARINFO 3
+
+struct framebuffer_varinfo {
+  uint16_t xres;
+  uint16_t yres;
+} __attribute__((packed));
+
+struct framebuffer_stinfo {
+  uint16_t width;
+  uint16_t height;
+  uint16_t pitch;
+  uint8_t bpp;
+} __attribute__((packed));
diff --git a/sysdeps/depthos/include/depthos/mmap.h b/sysdeps/depthos/include/depthos/mmap.h
new file mode 100644
index 00000000..f3873c63
--- /dev/null
+++ b/sysdeps/depthos/include/depthos/mmap.h
@@ -0,0 +1,16 @@
+#pragma once
+#include <bits/ensure.h>
+#include <stddef.h>
+// #include <stdint.h>
+#include <sys/types.h>
+
+namespace mlibc {
+struct sc_mmap_params {
+  void *addr;
+  size_t length;
+  int prot;
+  int flags;
+  int fd;
+  off_t offset;
+};
+} // namespace mlibc
diff --git a/sysdeps/depthos/include/depthos/syscall.h b/sysdeps/depthos/include/depthos/syscall.h
new file mode 100644
index 00000000..1efab1d1
--- /dev/null
+++ b/sysdeps/depthos/include/depthos/syscall.h
@@ -0,0 +1,98 @@
+#ifndef SYSCALL_H
+#define SYSCALL_H
+
+#include <mlibc/debug.hpp>
+#include <bits/ensure.h>
+#include <stdint.h>
+
+#define SYS_EXIT 0x1
+#define SYS_WRITE 0x2
+#define SYS_FORK 0x3
+#define SYS_EXECVE 0x4
+#define SYS_THCREATE 0x5
+#define SYS_THKILL 0x6
+#define SYS_READ 0x8
+#define SYS_OPEN 0x9
+#define SYS_CLOSE 0xA
+#define SYS_IOCTL 0xB
+#define SYS_VM_MAP 12
+#define SYS_PRCTL 13
+#define SYS_SLEEP 14
+#define SYS_DUP3 15
+#define SYS_GETPID 16
+#define SYS_GETPPID 17
+#define SYS_READENTRY 18
+#define SYS_SEEK 19
+#define SYS_ISATTY 20
+#define SYS_STATFD 21
+#define SYS_STAT 22
+#define SYS_TIMES 23
+
+using sc_data_t = long;
+extern "C" {
+static sc_data_t _syscall0(int num) {
+  sc_data_t ret;
+  asm volatile("int $0x64" : "=a"(ret) : "a"(num));
+  return ret;
+}
+
+static sc_data_t _syscall1(int num, sc_data_t a0) {
+  sc_data_t ret;
+  asm volatile("int $0x64" : "=a"(ret) : "a"(num), "b"(a0) : "memory");
+  return ret;
+}
+static sc_data_t _syscall2(int num, sc_data_t a0, sc_data_t a1) {
+  sc_data_t ret;
+  asm volatile("int $0x64" : "=a"(ret) : "a"(num), "b"(a0), "c"(a1) : "memory");
+  return ret;
+}
+static sc_data_t _syscall3(int num, sc_data_t a0, sc_data_t a1, sc_data_t a2) {
+  sc_data_t ret;
+  asm volatile("int $0x64"
+               : "=a"(ret)
+               : "a"(num), "b"(a0), "c"(a1), "d"(a2)
+               : "memory");
+  return ret;
+}
+static sc_data_t _syscall4(int num, sc_data_t a0, sc_data_t a1, sc_data_t a2,
+                           sc_data_t a3) {
+  sc_data_t ret;
+  asm volatile("int $0x64"
+               : "=a"(ret)
+               : "a"(num), "b"(a0), "c"(a1), "d"(a2), "S"(a3)
+               : "memory");
+  return ret;
+}
+}
+
+static inline sc_data_t sc_cast(long v) { return static_cast<sc_data_t>(v); }
+static inline sc_data_t sc_cast(const void *v) { return (sc_data_t)v; }
+
+static inline sc_data_t _syscall(int num) { return _syscall0(num); }
+static inline sc_data_t _syscall(int num, sc_data_t a0) {
+  return _syscall1(num, a0);
+}
+static inline sc_data_t _syscall(int num, sc_data_t a0, sc_data_t a1) {
+  return _syscall2(num, a0, a1);
+}
+static inline sc_data_t _syscall(int num, sc_data_t a0, sc_data_t a1,
+                                 sc_data_t a2) {
+  return _syscall3(num, a0, a1, a2);
+}
+static inline sc_data_t _syscall(int num, sc_data_t a0, sc_data_t a1,
+                                 sc_data_t a2, sc_data_t a3) {
+  return _syscall4(num, a0, a1, a2, a3);
+}
+
+inline int sc_error(long ret) {
+  if (ret < 0) {
+    mlibc::infoLogger() << "ayo what " << ret << frg::endlog;
+    return -ret;
+  }
+  return 0;
+}
+template <typename... T> static inline sc_data_t syscall(int num, T... args) {
+  return _syscall(num, sc_cast(args)...);
+}
+
+#endif
diff --git a/sysdeps/depthos/meson.build b/sysdeps/depthos/meson.build
new file mode 100644
index 00000000..6ac57c43
--- /dev/null
+++ b/sysdeps/depthos/meson.build
@@ -0,0 +1,69 @@
+libc_sources = files(
+  'generic/depthos.cpp',
+  'generic/entry.cpp',
+)
+
+
+if not no_headers
+	install_headers(
+    'include/abi-bits/access.h',
+    'include/abi-bits/auxv.h',
+    'include/abi-bits/blkcnt_t.h',
+    'include/abi-bits/blksize_t.h',
+    'include/abi-bits/clockid_t.h',
+    'include/abi-bits/dev_t.h',
+    'include/abi-bits/epoll.h',
+    'include/abi-bits/errno.h',
+    'include/abi-bits/fcntl.h',
+    'include/abi-bits/fsblkcnt_t.h',
+    'include/abi-bits/fsfilcnt_t.h',
+    'include/abi-bits/gid_t.h',
+    'include/abi-bits/in.h',
+    'include/abi-bits/ino_t.h',
+    'include/abi-bits/inotify.h',
+    'include/abi-bits/ioctls.h',
+    'include/abi-bits/limits.h',
+    'include/abi-bits/mode_t.h',
+    'include/abi-bits/mqueue.h',
+    'include/abi-bits/msg.h',
+    'include/abi-bits/nlink_t.h',
+    'include/abi-bits/packet.h',
+    'include/abi-bits/pid_t.h',
+    'include/abi-bits/poll.h',
+    'include/abi-bits/ptrace.h',
+    'include/abi-bits/resource.h',
+    'include/abi-bits/seek-whence.h',
+    'include/abi-bits/shm.h',
+    'include/abi-bits/signal.h',
+    'include/abi-bits/socket.h',
+    'include/abi-bits/socklen_t.h',
+    'include/abi-bits/stat.h',
+    'include/abi-bits/statfs.h',
+    'include/abi-bits/statvfs.h',
+    'include/abi-bits/suseconds_t.h',
+    'include/abi-bits/termios.h',
+    'include/abi-bits/time.h',
+    'include/abi-bits/uid_t.h',
+    'include/abi-bits/utsname.h',
+    'include/abi-bits/vm-flags.h',
+    'include/abi-bits/wait.h',
+    'include/abi-bits/xattr.h',
+		subdir: 'abi-bits'
+	)
+	install_headers(
+		'include/depthos/syscall.h',
+		'include/depthos/framebuffer.h',
+		subdir: 'depthos'
+	)
+endif
+
+if not headers_only
+  crt = custom_target('crt0',
+    build_by_default: true,
+		command: c_compiler.cmd_array() + ['-c', '-o', '@OUTPUT@', '@INPUT@'],
+		input: 'crt-i686/crt0.S',
+		output: 'crt0.o',
+		install: true,
+		install_dir: get_option('libdir')
+  )
+endif
-- 
2.34.1

